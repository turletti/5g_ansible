---
- name: Label {{ groups['core_node'][0] }} for Open5GS Core scheduling
  command: kubectl label node {{ groups['core_node'][0] }} open5gs-core-node=true --overwrite
  changed_when: false

- name: Add Kyverno Helm repo
  ansible.builtin.shell: |
    helm repo add kyverno https://kyverno.github.io/kyverno/
    helm repo update
  args:
    executable: /bin/bash

- name: Remove old Kyverno chart folder if it exists
  ansible.builtin.file:
    path: /tmp/kyverno
    state: absent

- name: Ensure /tmp/kyverno exists
  ansible.builtin.file:
    path: /tmp/kyverno
    state: directory

- name: Backup and remove existing Kyverno CRDs if present
  block:

    - name: Find existing Kyverno CRDs
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
      register: kyverno_crds

    - name: Backup CRDs
      copy:
        content: "{{ item | to_nice_yaml }}"
        dest: "~/kyverno-crd-backup-{{ item.metadata.name }}.yaml"
      loop: "{{ kyverno_crds.resources }}"
      when: "'kyverno.io' in item.metadata.name"

    - name: Delete CRDs
      kubernetes.core.k8s:
        state: absent
        definition: "{{ item }}"
      loop: "{{ kyverno_crds.resources }}"
      when: "'kyverno.io' in item.metadata.name"

  ignore_errors: yes

- name: Download Kyverno chart locally
  ansible.builtin.shell: |
    helm pull kyverno/kyverno --version 2.5.3 --untar --untardir /tmp/kyverno
  args:
    executable: /bin/bash

- name: Find actual untarred Kyverno folder
  ansible.builtin.find:
    paths: /tmp/kyverno
    file_type: directory
    patterns: "kyverno*"
  register: kyverno_chart_folder

- name: Fail if no Kyverno chart folder found
  ansible.builtin.fail:
    msg: "No Kyverno chart folder found in /tmp/kyverno. Helm pull may have failed."
  when: kyverno_chart_folder.matched == 0

- name: Install Kyverno Helm chart (Helm manages CRDs)
  ansible.builtin.shell: |
    helm upgrade --install kyverno {{ kyverno_chart_folder.files[0].path }} \
      -n kyverno --create-namespace --wait=false
  args:
    executable: /bin/bash

- name: Wait for Kyverno deployment to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: kyverno
    name: kyverno
  register: kyverno_status
  until:
    - kyverno_status.resources | length > 0
    - kyverno_status.resources[0].status.readyReplicas is defined
    - kyverno_status.resources[0].status.readyReplicas >= 1
  retries: 40
  delay: 15
  ignore_errors: yes

- name: Debug Kyverno deployment and pods if not ready
  block:
    - debug:
        var: kyverno_status.resources[0].status

    - name: List Kyverno pods
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: kyverno
      register: kyverno_pods

    - debug:
        var: kyverno_pods.resources

    - name: Fetch init container logs for Kyverno pods
      ansible.builtin.shell: |
        kubectl logs -n kyverno {{ item.metadata.name }} -c {{ c.name }} --tail=50
      loop: "{{ kyverno_pods.resources | subelements('spec.initContainers') }}"
      loop_control:
        label: "{{ item.0.metadata.name }} / {{ item.1.name }}"
      register: init_logs
      ignore_errors: yes

    - name: Display init container logs
      debug:
        var: init_logs.results
  when: kyverno_status is failed

- name: Copy Kyverno policy to force Open5GS pods to {{ groups['core_node'][0] }}
  copy:
    dest: /tmp/force-open5gs-node.yaml
    content: |
      apiVersion: kyverno.io/v1
      kind: ClusterPolicy
      metadata:
        name: force-open5gs-to-core-node
      spec:
        mutateExistingOnPolicyUpdate: true
        rules:
          - name: add-open5gs-node-selector
            match:
              resources:
                kinds: ["Pod"]
                selector:
                  matchLabels:
                    app: open5gs
            mutate:
              patchStrategicMerge:
                spec:
                  nodeSelector:
                    open5gs-core-node: "true"

- name: Apply Kyverno policy
  command: kubectl apply -f /tmp/force-open5gs-node.yaml
  changed_when: false

- name: Clone open5gs-k8s repo
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ repo_dest }}"
    version: main
    update: yes
    force: yes

- name: Ensure {{ open5gs_ns }} namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ open5gs_ns }}"
    state: present

- name: Build MongoDB 4.4.4 Docker image
  vars:
    mongo_version: "r4.4.4"
    mongo_image_name: "custom/mongodb:4.4.4-debian-10-r0"
    build_dir: "/tmp/mongo_build"
  tasks:
    - name: Install build dependencies
      apt:
        name:
          - build-essential
          - scons
          - libssl-dev
          - libcurl4-openssl-dev
          - liblzma-dev
          - python3
          - python3-pip
          - git
          - pkg-config
          - libsnappy-dev
          - zlib1g-dev
          - libboost-filesystem-dev
          - libboost-program-options-dev
          - libboost-system-dev
          - libboost-thread-dev
          - docker.io
        state: present
        update_cache: yes

    - name: Create build directory
      file:
        path: "{{ build_dir }}"
        state: directory
        mode: '0755'

    - name: Clone MongoDB source
      git:
        repo: https://github.com/mongodb/mongo.git
        dest: "{{ build_dir }}/mongo"
        version: "{{ mongo_version }}"
        force: yes

    - name: Create Dockerfile for MongoDB build
      copy:
        dest: "{{ build_dir }}/Dockerfile"
        content: |
          FROM debian:10
          RUN apt-get update && apt-get install -y \
              build-essential scons libssl-dev libcurl4-openssl-dev \
              liblzma-dev python3 python3-pip git pkg-config \
              libsnappy-dev zlib1g-dev libboost-filesystem-dev \
              libboost-program-options-dev libboost-system-dev \
              libboost-thread-dev && \
              rm -rf /var/lib/apt/lists/*
          COPY mongo /usr/src/mongo
          WORKDIR /usr/src/mongo/src
          RUN python3 ../buildscripts/scons.py --ssl all
          ENV PATH="/usr/src/mongo/src:${PATH}"
          CMD ["mongod"]

    - name: Build Docker image
      community.docker.docker_image:
        build:
          path: "{{ build_dir }}"
        name: "{{ mongo_image_name }}"
        tag: latest

- name: Verify MongoDB custom image is loaded in containerd
  ansible.builtin.shell: |
    crictl -r unix:///run/containerd/containerd.sock images | grep custom/mongodb:4.4.4-debian-10-r0
  register: mongo_image_check
  failed_when: mongo_image_check.stdout == ""
  changed_when: false

- name: Apply MongoDB with Kustomize
  ansible.builtin.command: kubectl apply -k "{{ repo_dest }}/mongodb" -n {{ open5gs_ns }}
  environment:
    # Ensure pods use the custom image
    IMAGE_MONGODB: "custom/mongodb:4.4.4-debian-10-r0"

- name: Wait for MongoDB pod to be Ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ open5gs_ns }}"
    label_selectors:
      - app.kubernetes.io/name=mongodb
  register: mongo_pods
  until: >
    mongo_pods.resources | length > 0 and
    (mongo_pods.resources[0].status.containerStatuses is defined) and
    (mongo_pods.resources[0].status.containerStatuses | length > 0) and
    (mongo_pods.resources[0].status.containerStatuses[0].ready | default(false))
  retries: 40
  delay: 5

- name: Apply NADs with Kustomize
  ansible.builtin.command: kubectl apply -k "{{ repo_dest }}/networks5g" -n {{ open5gs_ns }}

- name: Verify required NADs exist
  kubernetes.core.k8s_info:
    kind: NetworkAttachmentDefinition
    namespace: "{{ open5gs_ns }}"
  register: nad_info

- name: Fail if a required NAD is missing
  ansible.builtin.fail:
    msg: "NAD {{ item }} is missing in {{ open5gs_ns }}"
  when: item not in (nad_info.resources | map(attribute='metadata.name') | list)
  loop: "{{ nad_list }}"

- name: Apply Open5GS NFs with Kustomize
  ansible.builtin.command: kubectl apply -k "{{ repo_dest }}/{{ deployment_option }}" -n {{ open5gs_ns }}

- name: Wait for Open5GS Core NFs pods Ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ open5gs_ns }}"
    label_selectors:
      - "nf={{ item }}"
  register: nf_pod
  until: >
    nf_pod.resources | length > 0 and
    (nf_pod.resources[0].status.containerStatuses is defined) and
    (nf_pod.resources[0].status.containerStatuses | length > 0) and
    (nf_pod.resources[0].status.containerStatuses[0].ready | default(false))
  retries: 40
  delay: 5
  loop: "{{ nfs }}"
  loop_control:
    label: "{{ item }}"

- name: Install Python requirements for admin script
  ansible.builtin.pip:
    requirements: "{{ repo_dest }}/requirements.txt"
    virtualenv: "{{ repo_dest }}/venv"

- name: Deploy Open5GS Web UI with Kustomize
  ansible.builtin.command: kubectl apply -k "{{ repo_dest }}//open5gs-webui" -n {{ open5gs_ns }}

- name: Wait for WebUI pod Ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ open5gs_ns }}"
    label_selectors:
      - "nf=webui"
  register: webui_pod
  until: >
    webui_pod.resources | length > 0 and
    (webui_pod.resources[0].status.containerStatuses is defined) and
    (webui_pod.resources[0].status.containerStatuses | length > 0) and
    (webui_pod.resources[0].status.containerStatuses[0].ready | default(false))
  retries: 40
  delay: 5

- name: Run add-admin-account.py
  ansible.builtin.command: >
    {{ repo_dest }}/venv/bin/python mongo-tools/add-admin-account.py
  args:
    chdir: "{{ repo_dest }}"

- name: Add subscribers
  ansible.builtin.shell: |
    {{ repo_dest }}/venv/bin/python mongo-tools/generate-data.py && \
    {{ repo_dest }}/venv/bin/python mongo-tools/add-subscribers.py
  args:
    chdir: "{{ repo_dest }}"
  register: sub_out
  changed_when: false

- name: Check added subscribers
  ansible.builtin.shell: |
    {{ repo_dest }}/venv/bin/python mongo-tools/check-subscribers.py
  args:
    chdir: "{{ repo_dest }}"
  register: check_out
  changed_when: false

- name: Show Added subscribers
  debug:
    var: check_out.stdout