---
- name: (POS) Free any existing allocation for {{ node }}
  shell: pos allocations free -k "{{ node }}"

- name: (POS) Allocate {{ node }} 
  shell: pos allocations allocate "{{ node }}"

- name: Set POS image command for {{ node }}
  ansible.builtin.set_fact:
    pos_image_cmd: >-
      {% if node == groups['ran_node'][0]
         and hostvars[groups['faraday'][0]].rru in ['benetel1', 'benetel2'] %}
      pos node image {{ node }} boot-local
      {% else %}
      pos nodes image --staging {{ node }} {{ pos_image }}
      {% endif %}

- name: (POS) Flash image {{ pos_image_cmd }} to {{ node }}
  ansible.builtin.shell: "{{ pos_image_cmd }}"

- name: (POS) Set boot parameters on node {{ node }} for RRU {{ hostvars[groups['faraday'][0]].rru }}
  ansible.builtin.shell: >-
    {% if hostvars[groups['faraday'][0]].rru in ['benetel1', 'benetel2'] %}
    # useless, when boot-local, grub parameters used are default grub params on the server
    pos nodes bootparameter {{ node }} {{ boot_parameters_rt }}
    {% elif node in ['sopnode-f1', 'sopnode-f2'] %}
    pos nodes bootparameter {{ node }} {{ boot_parameters_f1f2 }}
    {% else %}
    pos nodes bootparameter {{ node }} {{ boot_parameters_f3 }}
    {% endif %}
  when: node == groups['ran_node'][0]

- name: (POS) Reset {{ node }}
  shell: pos nodes reset "{{ node }}"

- name: (POS) Wait for SSH to be available on {{ node }}
  wait_for:
    host: "{{ node }}"
    port: 22
    timeout: 300

- name: Bootstrap {{ node }} if RAN node for Benetel
  ansible.builtin.shell: >-
    {% if hostvars[groups['faraday'][0]].rru in ['benetel1', 'benetel2'] %}
    pos node bootstrap {{ node }}
    {% endif %}
  when: node == groups['ran_node'][0]


