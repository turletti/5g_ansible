---
- name: Upload kubeadm config to the master node
  copy:
    src: kubeadm-config.yaml
    dest: /root/kubeadm-config.yaml
    mode: '0644'
  become: true

- name: Initialize Kubernetes cluster with kubeadm config
  command: kubeadm init --config kubeadm-config.yaml
  register: kubeadm_init
  failed_when: kubeadm_init.rc != 0
  changed_when: kubeadm_init.rc == 0

- name: Create .kube directory in user's home
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0700'

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    mode: '0600'

# Install flannel CNI before CoreDNS
- name: Ensure pip is installed
  ansible.builtin.apt:
    name: python3-pip
    state: present
    update_cache: yes

- name: Ensure Python Kubernetes client is there to install flannel
  ansible.builtin.pip:
    name: kubernetes
    executable: pip3

- name: Create kube-flannel namespace 
  kubernetes.core.k8s:
    name: kube-flannel
    api_version: v1
    kind: Namespace
    state: present
  become: true

- name: Download Helm install script
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get-helm-3
    mode: '0755'

- name: Install Helm
  ansible.builtin.command: /tmp/get-helm-3
  args:
    creates: /usr/local/bin/helm

- name: Apply namespace with pod-security label
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: kube-flannel
        labels:
          pod-security.kubernetes.io/enforce: privileged
    state: present
    apply: yes
  become: true

- name: Add Flannel Helm repo
  kubernetes.core.helm_repository:
    name: flannel
    repo_url: https://flannel-io.github.io/flannel/
  become: true

- name: Install Flannel via Helm
  kubernetes.core.helm:
    name: flannel
    chart_ref: flannel/flannel
    release_namespace: kube-flannel
    create_namespace: false
    state: present
    wait: true
    wait_timeout: 300s
  become: true

- name: Wait for CoreDNS pods to be Ready
  shell: kubectl wait --namespace=kube-system --for=condition=Ready pod -l k8s-app=kube-dns --timeout=180s
  register: coredns_wait
  retries: 3
  delay: 10
  until: coredns_wait.rc == 0

# Install Multus
- name: Upload Multus DaemonSet manifest with patched resources to the master node
  copy:
    src: multus-daemonset.yml
    dest: /root/multus-daemonset.yml
    mode: '0644'
  become: true

- name: Install Multus DaemonSet
  kubernetes.core.k8s:
    state: present
    src: /root/multus-daemonset.yml
  become: true

- name: Wait for Multus DaemonSet to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: DaemonSet
    namespace: kube-system
    name: kube-multus-ds
  register: multus_ds_info
  until:
    - multus_ds_info.resources | length > 0
    - multus_ds_info.resources[0].status.desiredNumberScheduled is defined
    - multus_ds_info.resources[0].status.numberReady is defined
    - multus_ds_info.resources[0].status.desiredNumberScheduled == multus_ds_info.resources[0].status.numberReady
  retries: 40
  delay: 15
  become: true

# Resume k8s master node setup
- name: Remove NoSchedule taint from master node
  command: kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-
  register: taint_out
  failed_when: false

- name: Generate kubeadm join command
  shell: kubeadm token create --print-join-command
  register: join_command
  run_once: true
  delegate_to: "{{ groups['core_node'][0] }}"

- name: Save join command to control node
  copy:
    content: "{{ join_command.stdout }}"
    dest: /tmp/kubeadm_join_command.txt
  delegate_to: localhost
  run_once: true
